This Vim plugin implements interactive Ruby debugger in Vim.

Features:

1. It can debug any Ruby application (Rails, by default), using ruby-debug-ide gem

2. The debugger looks like in the Netbeans - you can go through the code, watch variables, breakpoints in separate window, set and remove breakpoints.

3. It supports command-line rdebug commands. E.g., you can you can execute ':RdbCommand p User.all' in command line of VIM and it will display result like usual echo VIM command.


= Requirements

* Vim >= 7.0, compiled with +signs and +clientserver. You can verify it by VIM command: 

    :echo has("signs") && has("clientserver") && v:version > 700

  It should show result '1'.

* ruby-debug-ide gem


== Installation

I didn't try it in Windows yet (I think it will not work there), only Linux. To install it:

1. Clone the repo
  git clone git://github.com/astashov/vim-ruby-debugger.git

2. Copy contents of 'vim' folder to your ~/.vim/. You should have 3 files there then: ~/.vim/plugin/ruby_debugger.vim, ~/.vim/bin/ruby_debugger.rb and ~/.vim/doc/ruby_debugger.txt
First file is a debugger plugin and second is a small ruby script, that makes interaction between the VIM and the ruby-debug-ide gem. Third is documentation file.

3. Generate local tags file
	:helptags ~/.vim/doc

Now, you can use ':help ruby-debugger' to get help for the ruby-debugger plugin

== Using

1. Run Vim. If you use gvim, it will automatically start the server, but if you use vim, you need to set
servername explicitly, e.g., vim --servername VIM

2. Go to the directory with some your Rails application.
  :cd ~/projects/rails

2. Run Server with Debugger:
  :Rdebugger
It will kill any listeners of ports 39767 and 39768 and run rdebug-ide and ~/.vim/bin/ruby_debugger.rb on these ports accordingly.

3. Set breakpoint somewhere by <Leader>b (e.g., '\b'). You should see 'xx' symbol at current line.

4. Open page with the breakpoint in the browser. Vim should automatically set current line to breakpoint.

5. After this, you can use commands:
  <Leader>b - set breakpoint at current line
  <Leader>v - open/close window with variables. You can expand/collapse variables by 'o' in normal mode or left-mouse double-click
  <Leader>n - step over
  <Leader>s - step into
  <Leader>c - continue


== Screenshot

Here: http://astashov.net/vim_ruby_debugger.png


== Thanks

Special thanks to tpope (for rails.vim) and Marty Grenfell (for NERDTree), mostly, I learn Vim Scripting from their projects.
